#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('socket.io-test:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io').listen(server);

Array.prototype.indexOf = function(val) {
for (var i = 0; i < this.length; i++) {
if (this[i] == val) return i;
}
return -1;
};
 
Array.prototype.remove = function(val) {
var index = this.indexOf(val);
if (index > -1) {
this.splice(index, 1);
}
};


var list=[];
var listPerson=[];
//var person={name:"dadasd",socketId:"1234648646"};
io.on('connection', function (socket) {
  //
  socket.on('join_room', function (data) {
    console.log(data.name)
    console.log(socket.id);
    var id=socket.id;
    socket.nickname=data.name;
    var obj={id:id,socket:socket};
    list.push(obj);
    listPerson.push({id:id,nickname:data.name});
    io.sockets.emit('join_room_tip', { msg: data.name,id:id});
    io.sockets.emit('person-list',listPerson);          
  });

  socket.on('msg',function(data){
    socket.broadcast.emit('msg', data);
  });


  socket.on('private-msg',function(data){
    console.log("==========================================");
    console.log(data)
    console.log(data.nickname+"              "+data.toNickname+"                     "+data.msg);
    console.log("==========================================");
    socket.to(data.toId).emit('private-msg', data);
  });


  //用户断开连接的事件，包括刷新浏览器
  socket.on('disconnect',function(){
      console.log("=======================================");
      console.log(socket.nickname);
      for(var i=0;i<listPerson.length;i++){
          if(listPerson[i].nickname===socket.nickname){
              listPerson.remove(listPerson[i]);
              io.sockets.emit('person-list',listPerson);
              io.sockets.emit('exit_room_tip', { msg: socket.nickname});
          }
      }
  })

});                                                                                                                                                                                                                                                                              


/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
